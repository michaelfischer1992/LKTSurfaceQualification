User selected C:\git\LKTSurfaceQualification\images\1B_3mm_l1_2048.jpg
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\calcGrayscaleThresholdInImage.m',10,1)">10  </a>pxW = 5;
%% parameters 
pxW = 5;
dist2Border = 20; % start from bottom at 20 pixel 
sampleHeight = 10; % pixel height of sample = 10
% take sample at 25%, 50% and 75% of image width, and take the smallest for
% background, the largest for material 
positionsOfSamples = [0.05, 0.25, 0.5, 0.75, 0.95]; 
% initialize arrays 
hintergrundwert = NaN(length(positionsOfSamples), 1); 
materialwert = NaN(length(positionsOfSamples), 1); 

%% 
% convert rgb to grayscale 
if size(app.imgOriginal, 3)==3
    img = rgb2gray(app.imgOriginal);
else
    img = app.imgOriginal;
end
% plot imgOriginal
if app.doPlot
    figure, imshow(img)
    ax = gca;
    ax.Clipping = 'off';    % turn clipping off
end
[imageHeight, imageWidth, ~] = size(img);
for i = 1 : length(positionsOfSamples)
    xPos = round(imageWidth * positionsOfSamples(i)); 
    centeredValues = (xPos - pxW) : (xPos + pxW);
    upperFractionOfImage = img(dist2Border : (dist2Border + sampleHeight), centeredValues);
    yRange = (imageHeight - (dist2Border + sampleHeight)) : (imageHeight - dist2Border); 
    lowerFractionOfImage = img(yRange, centeredValues);
    hintergrundwert(i, :) =  mean2(upperFractionOfImage);
    materialwert(i, :) = mean2(lowerFractionOfImage);
end

% calculate threshold
schwellwert = (min(hintergrundwert) + max(materialwert))/2;
% convert grayscale image to binary image
imgBW = img > schwellwert;
if app.doPlot
    figure, imshow(imgBW)
    ax = gca;
    ax.Clipping = 'off';    % turn clipping off
end
% determine max height 
i = imageHeight; 
while imgBW(i, 1) == 0 
    i = i - 1; 
end
% clip this region and make regionprops on it. The largest regionprops is
% then the one we need to fill with ONES 
imgBW_clipped = imgBW(i:imageHeight, :);
imgBW_clipped_RegionProps = regionprops(~imgBW_clipped, 'Area', 'PixelList');
[~, ab, ~] = intersect(vertcat(imgBW_clipped_RegionProps(:).Area), max(vertcat(imgBW_clipped_RegionProps(:).Area)));
relevantPixelList = imgBW_clipped_RegionProps(ab).PixelList;
% determine max height 
Id = imageHeight; 
while imgBW(Id, 1) == 0 
    Id = Id - 1; 
end
% determine max height 
critHeight = imageHeight; 
while imgBW(critHeight, 1) == 0 
    critHeight = critHeight - 1; 
end

% clip this region and make regionprops on it. The largest regionprops is
% then the one we need to fill with ONES 
imgBW_clipped = imgBW(critHeight:imageHeight, :); 
imgBW_clipped_RegionProps = regionprops(~imgBW_clipped, 'Area', 'PixelList');
[~, ab, ~] = intersect(vertcat(imgBW_clipped_RegionProps(:).Area), max(vertcat(imgBW_clipped_RegionProps(:).Area)));
relevantPixelList = imgBW_clipped_RegionProps(ab).PixelList;
imgBW_tmp = imgBW;
imgBW_tmp = imgBW;
i = 1

i =

     1

imgBW_tmp(relevantPixelList(i, 1), relevantPixelList(i, 2) + critHeight) = 1;
relevantPixelList(i, 2) + critHeight

ans =

        2021

relevantPixelList(i, 2) + critHeight

ans =

        2021

imgBW_tmp( relevantPixelList(i, 2) + critHeight, relevantPixelList(i, 1)) = 1;
relevantPixelList(i, 1)

ans =

     1

relevantPixelList(i, 2) + critHeight, relevantPixelList(i, 1)

ans =

        2021


ans =

     1

imgBW_tmp( relevantPixelList(i, 2) + critHeight - 1, relevantPixelList(i, 1)) = 1;
for i = 1 : length(relevantPixelList) 
    imgBW_tmp( relevantPixelList(i, 2) + critHeight - 1, relevantPixelList(i, 1)) = 1; 
end
figure, imshow(imgBW_tmp)
    ax = gca;
    ax.Clipping = 'off';    % turn clipping off
if system_dependent('IsDebugMode')==1, dbquit all; end
SLS_Oberflaechenrauheit_final_2020
