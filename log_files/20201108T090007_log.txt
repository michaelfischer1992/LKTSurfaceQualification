User selected C:\git\LKTSurfaceQualification\images\1B_3mm_l1_2048.jpg
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\SLS_Oberflaechenrauheit_final_2020.m',255,1)">255 </a>[app.imageHeight, app.imageWidth, ~] = size(app.imgOriginal);
[app.imageHeight, app.imageWidth, ~] = size(app.imgOriginal);
pxW = 5;
centeredValues = (round(app.imageWidth/2)-pxW):(round(app.imageWidth/2)+pxW);
centeredValues

centeredValues =

  Columns 1 through 5

       14298       14299       14300       14301       14302

  Columns 6 through 10

       14303       14304       14305       14306       14307

  Column 11

       14308

upperFractionOfImage = app.imgOriginal(pxW:1:(pxW+10),centeredValues);
upperFractionOfImage

upperFractionOfImage =

  11×11 <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a> matrix

    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0
    1    1    1    1    1    1    1    1    1    1    1
    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    1    1    1    1
    0    0    0    0    0    0    0    1    1    1    1
    0    0    0    0    0    0    0    1    1    1    1
    0    0    0    0    0    0    0    1    1    0    0
    3    4    4    4    3    3    2    1    1    0    0
   16   17   17   17   17   16   16   13   12   10    9
   25   26   26   27   26   25   25   27   26   24   21

lowerFractionOfImage = app.imgOriginal((app.imageHeight-(3*pxW)):(app.imageHeight-pxW),centeredValues);
lowerFractionOfImage

lowerFractionOfImage =

  11×11 <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a> matrix

   141   141   157   175   186   186   185   178   174   171   173
   149   149   162   180   189   190   188   183   178   176   178
   167   166   176   188   195   196   194   187   183   182   184
   177   177   182   185   186   185   186   178   177   179   181
   187   186   181   175   168   164   163   160   162   166   171
    94    94    88    78    70    66    66    67    67    71    73
     0     2     2     0     0     0     0     1     0     0     0
     0     0     0     0     0     0     0     2     1     0     0
     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0

app.hintergrundwert =  mean2(upperFractionOfImage);
app.hintergrundwert

ans =

    4.0331

app.materialwert = mean2(lowerFractionOfImage);
app.materialwert

ans =

   86.9835

figure, imshow(app.imgOriginal)
        ax = gca; 
        ax.Clipping = 'off';    % turn clipping off
round(app.imageWidth/2)-pxW)
 round(app.imageWidth/2)-pxW)
                            ↑
{Error: Invalid expression. When calling a function or indexing a
variable, use parentheses. Otherwise, check for mismatched
delimiters.
} 
round(app.imageWidth/2)-pxW

ans =

       14298

centeredValues = (round(app.imageWidth/2)-pxW):(round(app.imageWidth/2)+pxW);
centeredValues

centeredValues =

  Columns 1 through 5

       14298       14299       14300       14301       14302

  Columns 6 through 10

       14303       14304       14305       14306       14307

  Column 11

       14308

pxW:1:(pxW+10)

ans =

     5     6     7     8     9    10    11    12    13    14    15

upperFractionOfImage = app.imgOriginal(1:20),centeredValues);
 upperFractionOfImage = app.imgOriginal(1:20),centeredValues);
                                                            ↑
{Error: Invalid expression. When calling a function or indexing a
variable, use parentheses. Otherwise, check for mismatched
delimiters.
} 
upperFractionOfImage = app.imgOriginal(1:20,centeredValues);
upperFractionOfImage

upperFractionOfImage =

  20×11 <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a> matrix

   18   18   18   18   18   18   18   18   18   18   18
    7    7    7    7    7    7    7    7    7    7    7
    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0
    1    1    1    1    1    1    1    1    1    1    1
    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    1    1    1    1
    0    0    0    0    0    0    0    1    1    1    1
    0    0    0    0    0    0    0    1    1    1    1
    0    0    0    0    0    0    0    1    1    0    0
    3    4    4    4    3    3    2    1    1    0    0
   16   17   17   17   17   16   16   13   12   10    9
   25   26   26   27   26   25   25   27   26   24   21
   25   26   27   27   27   26   26   35   33   30   26
   27   23   25   25   26   29   31   38   36   32   27
   23   20   19   21   25   27   30   35   34   31   26
   21   17   17   19   21   25   30   32   32   29   24
   20   18   17   19   21   25   28   27   28   27   21

app.imgOriginal(1, 1, 1)

ans =

  <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a>

   50

app.imgOriginal(1, 1, 2)

ans =

  <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a>

   54

app.imgOriginal(1, 1, 3)

ans =

  <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a>

   57

app.imgOriginal(1, 1, 4)
{Index in position 3 exceeds array bounds (must not exceed 3).
} 
app.imgOriginal(1, 1, 3)

ans =

  <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a>

   57

img = rgb2gray(app.imgOriginal);
[app.imageHeight, app.imageWidth, ~] = size(img);
positionsOfSamples = [0.05, 0.25, 0.5, 0.75, 0.95];
img = rgb2gray(app.imgOriginal);
[app.imageHeight, app.imageWidth, ~] = size(img);
% take sample at 25%, 50% and 75% of image width, and take the smallest for
% background, the largest for material
i = 1

i =

     1

xPos = round(app.imageWidth * positionsOfSamples(i)); 
    centeredValues = (xPos - pxW) : (xPos + pxW);
upperFractionOfImage = app.imgOriginal(dist2Border : (dist2Border + sampleHeight), centeredValues);
{Unrecognized function or variable 'dist2Border'.
} 
pxW = 5;
dist2Border = 20; % start from bottom at 20 pixel 
sampleHeight = 10; % pixel height of sample = 10
positionsOfSamples = [0.05, 0.25, 0.5, 0.75, 0.95];
upperFractionOfImage = app.imgOriginal(dist2Border : (dist2Border + sampleHeight), centeredValues);
upperFractionOfImage

upperFractionOfImage =

  11×11 <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a> matrix

   27   27   26   23   19   17   17   17   21   20   19
   25   25   24   21   19   17   16   16   20   20   19
   19   19   19   18   16   15   15   16   19   19   18
   18   18   17   16   15   15   16   18   19   18   17
   18   18   18   17   16   17   19   21   20   19   16
   17   17   16   16   17   19   23   25   21   20   17
   16   16   16   16   17   19   23   24   22   21   19
   16   16   16   17   18   19   22   22   23   22   21
   16   16   17   18   18   19   21   21   24   24   23
   16   17   18   19   19   19   21   21   23   24   25
   18   19   20   20   20   20   22   21   23   22   23

yRange = (app.imageHeight - (dist2Border + sampleHeight)) : (app.imageHeight - dist2Border);
yRange

yRange =

  Columns 1 through 5

        2018        2019        2020        2021        2022

  Columns 6 through 10

        2023        2024        2025        2026        2027

  Column 11

        2028

lowerFractionOfImage = app.imgOriginal(yRange, centeredValues);
lowerFractionOfImage

lowerFractionOfImage =

  11×11 <a href="matlab:helpPopup uint8" style="font-weight:bold">uint8</a> matrix

   183   173   163   164   175   191   201   204   194   191   189
   101    92    85    87   102   118   131   135   126   124   124
    27    23    20    20    24    27    28    27    27    26    26
     0     0     0     0     0     0     1     1     1     1     1
     0     2     3     2     0     0     1     3     1     1     1
     0     0     0     0     0     0     0     0     0     0     0
     3     0     0     0     0     1     0     0     1     1     0
     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0

app.hintergrundwert(i, :) =  mean2(upperFractionOfImage);
    app.materialwert(i, :) = mean2(lowerFractionOfImage);
for i = 1 : length(positionsOfSamples)
    xPos = round(app.imageWidth * positionsOfSamples(i)); 
    centeredValues = (xPos - pxW) : (xPos + pxW);
    upperFractionOfImage = app.imgOriginal(dist2Border : (dist2Border + sampleHeight), centeredValues);
    yRange = (app.imageHeight - (dist2Border + sampleHeight)) : (app.imageHeight - dist2Border); 
    lowerFractionOfImage = app.imgOriginal(yRange, centeredValues);
    hintergrundwert(i, :) =  mean2(upperFractionOfImage);
    materialwert(i, :) = mean2(lowerFractionOfImage);
end
hintergrundwert

hintergrundwert =

   19.2562
   21.5124
   20.9587
   21.6281
    1.6529

materialwert

materialwert =

   29.3636
  164.0083
  159.5041
  164.6777
  136.4050

app.schwellwert = (hintergrundwert + materialwert)/2;
%% 
% convert rgb to grayscale 
img = rgb2gray(app.imgOriginal);
[app.imageHeight, app.imageWidth, ~] = size(img);
% take sample at 25%, 50% and 75% of image width, and take the smallest for
% background, the largest for material 

hintergrundwert = NaN(length(positionsOfSamples), 1); 
materialwert = NaN(length(positionsOfSamples), 1); 
for i = 1 : length(positionsOfSamples)
    xPos = round(app.imageWidth * positionsOfSamples(i)); 
    centeredValues = (xPos - pxW) : (xPos + pxW);
    upperFractionOfImage = app.imgOriginal(dist2Border : (dist2Border + sampleHeight), centeredValues);
    yRange = (app.imageHeight - (dist2Border + sampleHeight)) : (app.imageHeight - dist2Border); 
    lowerFractionOfImage = app.imgOriginal(yRange, centeredValues);
    hintergrundwert(i, :) =  mean2(upperFractionOfImage);
    materialwert(i, :) = mean2(lowerFractionOfImage);
end


% calculate threshold
app.schwellwert = (hintergrundwert + materialwert)/2;
app.schwellwert

ans =

   24.3099
   92.7603
   90.2314
   93.1529
   69.0289

hintergrundwert

hintergrundwert =

   19.2562
   21.5124
   20.9587
   21.6281
    1.6529

app.schwellwert = (min(hintergrundwert) + max(materialwert))/2;
app.schwellwert

ans =

   83.1653

%% parameters 
pxW = 5;
dist2Border = 20; % start from bottom at 20 pixel 
sampleHeight = 10; % pixel height of sample = 10
positionsOfSamples = [0.05, 0.25, 0.5, 0.75, 0.95]; 

%% 
% convert rgb to grayscale 
if size(app.imgOriginal, 3)==3
    img = rgb2gray(app.imgOriginal);
else
    img = app.imgOriginal;
end
[imageHeight, imageWidth, ~] = size(img);
% take sample at 25%, 50% and 75% of image width, and take the smallest for
% background, the largest for material 

hintergrundwert = NaN(length(positionsOfSamples), 1); 
materialwert = NaN(length(positionsOfSamples), 1); 
for i = 1 : length(positionsOfSamples)
    xPos = round(imageWidth * positionsOfSamples(i)); 
    centeredValues = (xPos - pxW) : (xPos + pxW);
    upperFractionOfImage = img(dist2Border : (dist2Border + sampleHeight), centeredValues);
    yRange = (imageHeight - (dist2Border + sampleHeight)) : (imageHeight - dist2Border); 
    lowerFractionOfImage = img(yRange, centeredValues);
    hintergrundwert(i, :) =  mean2(upperFractionOfImage);
    materialwert(i, :) = mean2(lowerFractionOfImage);
end


% calculate threshold
schwellwert = (min(hintergrundwert) + max(materialwert))/2;
%% parameters 
pxW = 5;
dist2Border = 20; % start from bottom at 20 pixel 
sampleHeight = 10; % pixel height of sample = 10
% take sample at 25%, 50% and 75% of image width, and take the smallest for
% background, the largest for material 
positionsOfSamples = [0.05, 0.25, 0.5, 0.75, 0.95]; 
% initialize arrays 
hintergrundwert = NaN(length(positionsOfSamples), 1); 
materialwert = NaN(length(positionsOfSamples), 1); 

%% 
% convert rgb to grayscale 
if size(app.imgOriginal, 3)==3
    img = rgb2gray(app.imgOriginal);
else
    img = app.imgOriginal;
end
[imageHeight, imageWidth, ~] = size(img);
for i = 1 : length(positionsOfSamples)
    xPos = round(imageWidth * positionsOfSamples(i)); 
    centeredValues = (xPos - pxW) : (xPos + pxW);
    upperFractionOfImage = img(dist2Border : (dist2Border + sampleHeight), centeredValues);
    yRange = (imageHeight - (dist2Border + sampleHeight)) : (imageHeight - dist2Border); 
    lowerFractionOfImage = img(yRange, centeredValues);
    hintergrundwert(i, :) =  mean2(upperFractionOfImage);
    materialwert(i, :) = mean2(lowerFractionOfImage);
end
% calculate threshold
schwellwert = (min(hintergrundwert) + max(materialwert))/2;
schwellwert

schwellwert =

   83.7645

imgBW = img > schwellwert;
figure, imshow(imgBW)
    ax = gca;
    ax.Clipping = 'off';    % turn clipping off
figure, imshow(imgBW)
    ax = gca;
    ax.Clipping = 'off';    % turn clipping off
figure, imshow(img)
    ax = gca;
    ax.Clipping = 'off';    % turn clipping off
i = imageHeight; 
while imgBW(i, 1) == 0 
    i = i - 1; 
end
i

i =

        2019

imgBW_clipped = imgBW(i:imageHeight, :);
regionprops(imgBW_clipped)

ans = 

  86×1 <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> array with fields:

    Area
    Centroid
    BoundingBox

imgBW_clipped_RegionProps = egionprops(imgBW_clipped);
{Unrecognized function or variable 'egionprops'.
} 
imgBW_clipped_RegionProps = regionprops(imgBW_clipped);
imgBW_clipped_RegionProps = regionprops(imgBW_clipped, 'Area', 'PixelList');
imgBW_clipped_RegionProps = regionprops(~imgBW_clipped, 'Area', 'PixelList');
[~, ab, ~] = intersect(vertcat(imgBW_clipped_RegionProps(:).Area), max(vertcat(imgBW_clipped_RegionProps(:).Area)));
relevantPixelList = imgBW_clipped_RegionProps(ab).PixelList;
[~, ab, ~] = intersect(vertcat(imgBW_clipped_RegionProps(:).Area), max(vertcat(imgBW_clipped_RegionProps(:).Area)));
relevantPixelList = imgBW_clipped_RegionProps(ab).PixelList;
if system_dependent('IsDebugMode')==1, dbquit; end
SLS_Oberflaechenrauheit_final_2020
