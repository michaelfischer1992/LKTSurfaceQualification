User selected C:\git\LKTSurfaceQualification\images\1B_3mm_l1_2048.jpg
Background area at the bottom filled with ones (area: 390793 px, width: 25914 px).
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\prepareImageWithBWAreaOpenOpenCloseCtc.m',15,1)">15  </a>widthHeightRatio =  app.imageWidth / app.imageHeight;
if system_dependent('IsDebugMode')==1, dbcont; end
Elapsed time is 0.756210 seconds.
Elapsed time is 1.481364 seconds.
Elapsed time is 0.759198 seconds.
bwareaopen: Of 4025 objects (< 100px) 2662 have been eliminated (current size: 20)
Elapsed time is 1.486821 seconds.
Elapsed time is 0.738225 seconds.
bwareaopen: Of 4025 objects (< 100px) 3286 have been eliminated (current size: 50)
Elapsed time is 1.469762 seconds.
Elapsed time is 0.740394 seconds.
bwareaopen: Of 4025 objects (< 100px) 3528 have been eliminated (current size: 80)
Elapsed time is 1.485076 seconds.
Elapsed time is 0.744798 seconds.
bwareaopen: Of 4025 objects (< 100px) 3622 have been eliminated (current size: 110)
Elapsed time is 2.042098 seconds.
Elapsed time is 0.693794 seconds.
Imclose: Of 4025 objects (< 20px) 3791 have been eliminated
(current size (app.erosionValue): 3)
Elapsed time is 0.051474 seconds.
Elapsed time is 0.134853 seconds.
i3 = round(((quantInit - i2_tmp) / quantInit) * 100, 1);
initialRegionProps = regionprops(BW_tmp, 'Area');
quantInit = length(initialRegionProps);
areasInit = sort(vertcat(initialRegionProps(:).Area));
areaAll_after = sum(areasInit(1:(quantInit-1)));
i4 = round(((areaAll - areaAll_after) / areaAll) * 100, 1);
disp(['Overall reduction of objects ', num2str(i3), '%'])
Overall reduction of objects 85.5%
disp(['Reduction in area ', num2str(i4), '%'])
Reduction in area 8.3%
figure
    set(gcf, 'units','normalized','outerposition',[0 0 1 1]);
    
    subplot(1, 5, 1)
    imshow(app.imgOriginal(:, 1:1000,  :))
    title('RGB image original')
    
    subplot(1, 5, 2)
    imshow(BW_bwAreaOpen(:, 1:1000))
    title('BW image original')
    
    subplot(1, 5, 3)
    imshow(BW_imClose(:, 1:1000))
    title('Morphologically closed')
  
    subplot(1, 5, 4)
    imshow(BW_tmp_LargePoresDeleted(:, 1:1000))
    title('Added: Large pores & bwAreaOpen-Background')
  
    subplot(1, 5, 5)
    imshow(BW_tmp(:, 1:1000))
    title('Morphologically opened')
if system_dependent('IsDebugMode')==1, dbcont; end
Overall reduction of objects 0%
Reduction in area 8.3%
if system_dependent('IsDebugMode')==1, dbcont; end
app = alignImageHorizontally(app);
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\alignImageHorizontally.m',12,1)">12  </a>boundary = realeKontur(app.imgEroded);
boundary = realeKontur(app.imgEroded);
width = app.imageWidth;
height = app.imageHeight;
Start(1,2) = 1;
boundary = realeKontur(app.imgEroded);
width = app.imageWidth;
height = app.imageHeight;
Start(1,2) = 1;
Start(1,1) = polyval(polyfit(boundary(:,2),boundary(:,1),1),Start(1,2));
Ende(1,2) = width;
Ende(1,1) = polyval(polyfit(boundary(:,2),boundary(:,1),1),Ende(1,2));
diffLR = Ende(1,1)-Start(1,1); % Unterschied der y-Komponenten
winkel = atand(diffLR/(width/2));
imgBWDreh = imrotate(app.imgEroded,winkel,'nearest','crop');
imgOrigDreh = imrotate(app.imgOriginal, winkel,'nearest','crop');
figure, imshow(imgBWDreh)
        ax = gca; 
        ax.Clipping = 'off';    % turn clipping off
linkeGrenze=abs(ceil(height/2 * diffLR/(width/2)));
if linkeGrenze <= 0
    linkeGrenze = 1;
end
rechteGrenze=width-floor(height/2 * diffLR/(width/2));
if rechteGrenze >= width
    rechteGrenze = width-1;
end
untereGrenze = ceil(height * tan(deg2rad(winkel)));
imgBWSchnitt = imgBWDreh(1:(height - abs(untereGrenze)), linkeGrenze:rechteGrenze);
imgOrigSchnitt = imgOrigDreh(:,linkeGrenze:rechteGrenze);
app.imgErod = imgBWSchnitt;
app.imgOrig = imgOrigSchnitt;
if app.doPlot
    app.hfig = imshow(app.imgErod);
    app.hfig = imshow(app.imgOrig);
end
app.hfig = imshow(app.imgErod);
    app.hfig = imshow(app.imgOrig);
figure, imshow(imgBWSchnitt)
        ax = gca; 
        ax.Clipping = 'off';    % turn clipping off
%% usually there wouldn't be a pore now in the lower left corner.
[height, ~, ~] = size(app.imgErod);
for i = height : -1 : 1
    if app.imgErod(i,1) == 0
        continue
    else
        lastLine = i + 1;
        break
    end
end
for i = 1 : size(app.imgErod,2)
    if app.imgErod(height,i) == 0
        continue
    else
        lastRow = i;
        break
    end
end
app.imgErod(lastLine:height, 1:lastRow) = 1;
%% if the first 40 pixels are all black, then it's surely no pore
if nnz(app.imgErod(height,1:app.pixelsWidthCheckIfPore)) == 0
    %% crop the image up to 'lastLine'
    imgBWSchnittSecond = imgBWSchnitt(1 : lastLine, :);
    app.imgErod = imgBWSchnittSecond;
    imgOrigSchnittSecond = imgOrigSchnitt(1 : lastLine, :);
    app.imgOrig = imgOrigSchnittSecond;
    if app.doPlot
        app.hfig = imshow(app.imgErod);
        app.hfig = imshow(app.imgOrig);
    end
end
%% if the first 40 pixels are all black, then it's surely no pore
if nnz(app.imgErod(height,1:app.pixelsWidthCheckIfPore)) == 0
    %% crop the image up to 'lastLine'
    imgBWSchnittSecond = imgBWSchnitt(1 : lastLine, :);
    app.imgErod = imgBWSchnittSecond;
    imgOrigSchnittSecond = imgOrigSchnitt(1 : lastLine, :);
    app.imgOrig = imgOrigSchnittSecond;
    if app.doPlot
        app.hfig = imshow(app.imgErod);
        app.hfig = imshow(app.imgOrig);
    end
end
nnz(app.imgErod(height,1:app.pixelsWidthCheckIfPore)) == 0

ans =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0

figure, imshow(app.imgErod)
        ax = gca; 
        ax.Clipping = 'off';    % turn clipping off
if system_dependent('IsDebugMode')==1, dbquit; end
app = alignImageHorizontally(app);
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\alignImageHorizontally.m',12,1)">12  </a>boundary = realeKontur(app.imgEroded);
if system_dependent('IsDebugMode')==1, dbcont; end
app = plotContoursInImage(app);
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\plotContoursInImage.m',11,1)">11  </a>Massstab = app.MassstabWert;
Massstab = app.MassstabWert;
img = app.imgErod;
boundary = realeKontur(img);
[heightBoundary,~] = size(boundary);
[height,width,~] = size(img);

% calculate length of real contour
laengeOberfl=0;
for i =2:heightBoundary
    laengeOberfl = laengeOberfl + sqrt((boundary(i,1)-boundary(i-1,1))^2 + (boundary(i,2)-boundary(i-1,2))^2);
end
app.realeKonturY = boundary(:,1);
app.realeKonturX = boundary(:,2);
disp(['real contour length: ', num2str(round(laengeOberfl*Massstab)), ' µm / ', ...
    num2str(laengeOberfl), ' px.']);
real contour length: 1025 µm / 96913.7817 px.
disp(['picture width: ', num2str(round(width*Massstab)), ' µm / ', ...
    num2str(width), ' px.']);
picture width: 303 µm / 28603 px.
disp(['ratio: ', num2str(round(laengeOberfl/width, 1))]);
ratio: 3.4
%% calculate top view surface
count = 0;
iZeile = 0;
zWerte = zeros(width*5,2);
for i = 1:(width*5)
    iZeile = i + count;
    zWerte(iZeile,2) = i;
    for j= 1:height
        if img(j,i) == 1
            zWerte(iZeile,1) = j;
            if i > 1
                a = zWerte(iZeile,1);
                b = zWerte(iZeile-1,1);
                if abs(b - a) > 1
                    zWerte(iZeile+1,1) = j;
                    zWerte(iZeile+1,2) = i;
                    zWerte(iZeile,2) = zWerte(iZeile-1,2);
                    zWerte(iZeile,1) = j;
                    count = count + 1;
                end
            end
            break;
        end
    end
    if iZeile - count >= width - 1
        break
    end
end
zWerte = [zWerte((1:iZeile),1),zWerte((1:iZeile),2)];
app.aufKontur = zWerte;
Mittel = mean2(app.realeKonturY); % Bild bereits ausgerichtet, deshalb Mittelwertberechnung nun trivial
app.hfig = imshow(app.imgErod);
    hold on;
    plot(app.realeKonturX, app.realeKonturY, 'g', 'Linewidth', 2);
    plot(app.aufKontur(:,2), app.aufKontur(:,1),'r','Linewidth',2);
    plot([1 width],[Mittel Mittel],'b','Linewidth',2);
    
    app.hfig = imshow(app.imgOrig);
    hold on;
    plot(app.realeKonturX, app.realeKonturY, 'g', 'Linewidth', 2);
    plot(app.aufKontur(:,2), app.aufKontur(:,1),'r','Linewidth',2);
    plot([1 width],[Mittel Mittel],'b','Linewidth',2);
figure
    imshow(app.imgErod);
    hold on;
    plot(app.realeKonturX, app.realeKonturY, 'g', 'Linewidth', 2);
    plot(app.aufKontur(:,2), app.aufKontur(:,1),'r','Linewidth',2);
    plot([1 width],[Mittel Mittel],'b','Linewidth',2);
    
    app.hfig = imshow(app.imgOrig);
    hold on;
    plot(app.realeKonturX, app.realeKonturY, 'g', 'Linewidth', 2);
    plot(app.aufKontur(:,2), app.aufKontur(:,1),'r','Linewidth',2);
    plot([1 width],[Mittel Mittel],'b','Linewidth',2);
figure
    imshow(app.imgErod);
    hold on;
    plot(app.realeKonturX, app.realeKonturY, 'g', 'Linewidth', 2);
    plot(app.aufKontur(:,2), app.aufKontur(:,1),'r','Linewidth',2);
    plot([1 width],[Mittel Mittel],'b','Linewidth',2);
    
    app.hfig = imshow(app.imgOrig);
    hold on;
    plot(app.realeKonturX, app.realeKonturY, 'g', 'Linewidth', 2);
    plot(app.aufKontur(:,2), app.aufKontur(:,1),'r','Linewidth',2);
    plot([1 width],[Mittel Mittel],'b','Linewidth',2);
    ax = gca;
    ax.Clipping = 'off';
if system_dependent('IsDebugMode')==1, dbquit; end
app = plotContoursInImage(app);
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\plotContoursInImage.m',11,1)">11  </a>Massstab = app.MassstabWert;
if system_dependent('IsDebugMode')==1, dbcont; end
real contour length: 1025 µm / 96913.7817 px.
picture width: 303 µm / 28603 px.
ratio: 3.4
app = runAllQualityParametersWithGivenParameters(app);
For parameter "Materialinseln" 643 objects were found.
Ratio to image area: 1%.
calculating surface quality parameter 1 took 
Elapsed time is 1.248540 seconds.
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\eliminateBlobsFromImage.m',18,1)">18  </a>blobMeasurements = regionprops(thisImage_tmp, 'Area');
tic
blobMeasurements = regionprops(thisImage_tmp, 'Area');
toc
Elapsed time is 0.752509 seconds.
% eliminate largest area (actual material, which was detected as regionprop) 
[~, ab, ~] = intersect(vertcat(blobMeasurements(:).Area), max(vertcat(blobMeasurements(:).Area)));
blobMeasurements(ab) = [];
% eliminate material islands
% PERFORMANCE - NO ISSUE
allPoints = vertcat(blobMeasurements(:).PixelList);
{Reference to non-existent field 'PixelList'.
} 
thisImage_tmp = thisImage; 
% declare regionprops -- previously always used bwlabel, but this is not
% necessary. You can directly use the logical image, which is the input
% of this function already. 
% PERFORMANCE - ISSUE - but there's no alternative to regionprops
% with 'PixelList': 3,2 sec - without: 0,8 sec
tic
blobMeasurements = regionprops(thisImage_tmp, 'Area', 'PixelList');
toc
Elapsed time is 3.029510 seconds.
% eliminate largest area (actual material, which was detected as regionprop) 
[~, ab, ~] = intersect(vertcat(blobMeasurements(:).Area), max(vertcat(blobMeasurements(:).Area)));
blobMeasurements(ab) = [];

% eliminate material islands
% PERFORMANCE - NO ISSUE
allPoints = vertcat(blobMeasurements(:).PixelList);
for i = 1 : length(allPoints)
    thisImage_tmp(allPoints(i, 2), allPoints(i, 1)) = 0;
end
% output
originalImageNoMatIslands = thisImage_tmp;
if system_dependent('IsDebugMode')==1, dbquit; end
app = runAllQualityParametersWithGivenParameters(app);
For parameter "Materialinseln" 643 objects were found.
Ratio to image area: 1%.
calculating surface quality parameter 1 took 
Elapsed time is 1.204273 seconds.
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\eliminateBlobsFromImage.m',18,1)">18  </a>blobMeasurements = regionprops(thisImage_tmp, 'Area', 'PixelList');
if system_dependent('IsDebugMode')==1, dbcont; end
Elapsed time is 4.466561 seconds.
if system_dependent('IsDebugMode')==1, dbquit; end
app = runAllQualityParametersWithGivenParameters(app);
For parameter "Materialinseln" 643 objects were found.
Ratio to image area: 1%.
calculating surface quality parameter 1 took 
Elapsed time is 1.189571 seconds.
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\eliminateBlobsFromImage.m',17,1)">17  </a>blobMeasurements = regionprops(thisImage_tmp, 'Area', 'PixelList');
if system_dependent('IsDebugMode')==1, dbcont; end
For parameter "Materialinseln" 808 objects were found.
Ratio to image area: 1%.
calculating surface quality parameter 2 took 
Elapsed time is 19.997725 seconds.
For parameter "Materialinseln" 564 objects were found.
Ratio to image area: 1%.
calculating surface quality parameter 3 took 
Elapsed time is 1.437026 seconds.
{Operation terminated by user during <a href="matlab:matlab.internal.language.introspective.errorDocCallback('unique>uniqueR2012a', 'C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\unique.m', 229)" style="font-weight:bold">unique>uniqueR2012a</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\unique.m',229,0)">line 229</a>)


In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('unique', 'C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\unique.m', 155)" style="font-weight:bold">unique</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\unique.m',155,0)">line 155</a>)
        [varargout{1:nlhs}] =
        uniqueR2012a(varargin{1},logical(flaginds(1:5)));

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('intersect>intersectR2012a', 'C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\intersect.m', 220)" style="font-weight:bold">intersect>intersectR2012a</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\intersect.m',220,0)">line 220</a>)
            [c,iau] = unique([a(ia) b([])],order);

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('intersect', 'C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\intersect.m', 111)" style="font-weight:bold">intersect</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2020b\toolbox\matlab\ops\intersect.m',111,0)">line 111</a>)
    [varargout{1:nlhs}] = intersectR2012a(varargin{:});

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('drawVerticalLinesForUndercuts', 'C:\git\LKTSurfaceQualification\functions\drawVerticalLinesForUndercuts.m', 25)" style="font-weight:bold">drawVerticalLinesForUndercuts</a> (<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\drawVerticalLinesForUndercuts.m',25,0)">line 25</a>)
    [~, previousPixelRow, ~] = intersect(previousRowIdx, 1);

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('runAllQualityParametersWithGivenParameters>CalcQualityParam4', 'C:\git\LKTSurfaceQualification\functions\runAllQualityParametersWithGivenParameters.m', 75)" style="font-weight:bold">runAllQualityParametersWithGivenParameters>CalcQualityParam4</a>
(<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\runAllQualityParametersWithGivenParameters.m',75,0)">line 75</a>)
[vertLinesForUndercuts] =
drawVerticalLinesForUndercuts(~originalImageBothEliminated);

In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('runAllQualityParametersWithGivenParameters', 'C:\git\LKTSurfaceQualification\functions\runAllQualityParametersWithGivenParameters.m', 15)" style="font-weight:bold">runAllQualityParametersWithGivenParameters</a> (<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\runAllQualityParametersWithGivenParameters.m',15,0)">line 15</a>)
[handles] = CalcQualityParam4(handles);
} 
if system_dependent('IsDebugMode')==1, dbquit; end
SLS_Oberflaechenrauheit_final_2020
