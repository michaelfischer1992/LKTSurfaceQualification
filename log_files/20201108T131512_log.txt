User selected C:\git\LKTSurfaceQualification\images\11565_0011.jpg
<a href="matlab: opentoline('C:\git\LKTSurfaceQualification\functions\prepareImageWithBWAreaOpenOpenCloseCtc.m',15,1)">15  </a>widthHeightRatio =  app.imageWidth / app.imageHeight;
widthHeightRatio =  app.imageWidth / app.imageHeight;
if widthHeightRatio < aspectRatioTS
    imageType = 'normal';
else
    imageType = 'panorama';
end

%% filter all objects that are small than filterTS
if strcmp(imageType, 'normal')
    filterMatIslands = 3;
    filterPores = 3;
    P = 1;
    interval4P = 2; 
else
    filterMatIslands = 100;
    filterPores = 20;
    P = 20;
    interval4P = 30; 
    app.erosionValue = 3;
end

%% count the material islands that are in the image right now
tic
initialRegionProps = regionprops(app.imgBWnoScale, 'Area');
toc
Elapsed time is 0.076157 seconds.
% eliminate largest area (actual material, which was detected as regionprop) 
[~, ab, ~] = intersect(vertcat(initialRegionProps(:).Area), max(vertcat(initialRegionProps(:).Area)));
initialRegionProps(ab) = [];
% quantity of regionprops
quantInit = length(initialRegionProps);
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Remove small objects (material islands) from binary image
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% find the regions smaller threshold
areasInit = sort(vertcat(initialRegionProps(:).Area));
areaAll = sum(areasInit);
initialAreasSmallerTS = nnz((areasInit) <= filterMatIslands);
% initialize image 
BW_bwAreaOpen = app.imgBWnoScale;
initialAreasSmallerTS_tmp = initialAreasSmallerTS;
while initialAreasSmallerTS_tmp > 1
    tic
    BW_bwAreaOpen = bwareaopen(BW_bwAreaOpen, P);
    toc
    if app.doPlot 
        figure, imshow(BW_bwAreaOpen)
        set(gcf, 'units','normalized','outerposition',[0 0 1 1]);
        ax = gca; 
        ax.Clipping = 'off';    % turn clipping off
    end
    tic
    initialRegionProps_tmp = regionprops(BW_bwAreaOpen, 'Area');
    toc
    disp(['bwareaopen: Of ', num2str(initialAreasSmallerTS), ' objects (< ', ...
        num2str(filterMatIslands), 'px) ', num2str(initialAreasSmallerTS - length(initialRegionProps_tmp)), ...
        ' have been eliminated (current size: ', num2str(P), ')'])
    initialAreasSmallerTS_tmp = nnz(sort(vertcat(initialRegionProps_tmp(:).Area)) <= filterMatIslands);
    P = P + interval4P;
end
Elapsed time is 0.126696 seconds.
Elapsed time is 0.063679 seconds.
bwareaopen: Of 29 objects (< 3px) -33 have been eliminated (current size: 1)
Elapsed time is 0.118928 seconds.
Elapsed time is 0.064796 seconds.
bwareaopen: Of 29 objects (< 3px) -5 have been eliminated (current size: 3)
BW_tmp = BW_bwAreaOpen; 
% save black background (with very distinct undercuts) for later)
tic
blackRegionProps = regionprops(~BW_tmp, 'Area', 'PixelList'); 
toc
Elapsed time is 0.219504 seconds.
[~, ab, ~] = intersect(vertcat(blackRegionProps(:).Area), max(vertcat(blackRegionProps(:).Area)));
backgroundRegionPropMostDistinct = blackRegionProps(ab).PixelList; 
% remember the big pores to preserve their shape 
[~, ab, ~] = intersect(vertcat(blackRegionProps(:).Area), max(vertcat(blackRegionProps(:).Area)));
blackRegionProps(ab) = [];
largePores = vertcat(blackRegionProps(:).Area) > 150;
largePoresRegionProps = blackRegionProps(largePores); 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Morphologically close image
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
se = strel(app.erosionType, app.erosionValue);
BW_imClose = imclose(BW_tmp, se);
% print results
tic
initialRegionProps_tmp2 = regionprops(BW_imClose, 'Area');
toc
Elapsed time is 0.066506 seconds.
disp(['Imclose: Of ', num2str(initialAreasSmallerTS), ' objects (< ', ...
    num2str(filterPores), 'px) ', num2str(initialAreasSmallerTS - length(initialRegionProps_tmp2)), ...
    ' have been eliminated', newline, '(current size (app.erosionValue): ', num2str(app.erosionValue), ')'])
Imclose: Of 29 objects (< 3px) 4 have been eliminated
(current size (app.erosionValue): 2)
% add the large pores again to image
allPixels = vertcat(largePoresRegionProps(:).PixelList);
BW_tmp_LargePoresDeleted = BW_imClose;
tic
for i = 1 : length(allPixels)
    BW_tmp_LargePoresDeleted(allPixels(i, 2), allPixels(i, 1)) = 0;
end
toc
Elapsed time is 0.017079 seconds.
% add distinct background with undercuts again to image 
tic
for i = 1 : length(backgroundRegionPropMostDistinct)
    BW_tmp_LargePoresDeleted(backgroundRegionPropMostDistinct(i, 2), backgroundRegionPropMostDistinct(i, 1)) = 0;
end
toc
Elapsed time is 0.051222 seconds.
BW_tmp = BW_tmp_LargePoresDeleted; 
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Morphologically open image
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BW_imOpen = imopen(BW_tmp, se);
i2_tmp = length(regionprops(BW_imOpen));
i2 = i1_tmp - i2_tmp;
{Unrecognized function or variable 'i1_tmp'.
} 
BW_imOpen = imopen(BW_tmp, se);
BW_tmp = BW_imOpen;
figure
    set(gcf, 'units','normalized','outerposition',[0 0 1 1]);
    
    subplot(1, 5, 1)
    imshow(app.imgOriginal(:, 1:1000,  :))
    title('RGB image original')
    
    subplot(1, 5, 2)
    imshow(BW_bwAreaOpen(:, 1:1000))
    title('BW image original')
    
    subplot(1, 5, 3)
    imshow(BW_imClose(:, 1:1000))
    title('Morphologically closed')
  
    subplot(1, 5, 4)
    imshow(BW_tmp_LargePoresDeleted(:, 1:1000))
    title('Added: Large pores & bwAreaOpen-Background')
  
    subplot(1, 5, 5)
    imshow(BW_tmp(:, 1:1000))
    title('Morphologically opened')
if system_dependent('IsDebugMode')==1, dbquit all; end
SLS_Oberflaechenrauheit_final_2020
